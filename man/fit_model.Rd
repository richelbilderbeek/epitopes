% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_model.R
\name{fit_model}
\alias{fit_model}
\title{Fit Random Forest model to epitope data}
\usage{
fit_model(
  peptides.list,
  assessment.mode = c("CV", "holdout"),
  holdout.split = NULL,
  threshold = 0.5,
  sample.rebalancing = TRUE,
  use.global.features = ifelse(peptides.list$splits.attrs$split_level == "protein",
    TRUE, FALSE),
  ncpus = 1,
  rnd.seed = NULL,
  ...
)
}
\arguments{
\item{peptides.list}{data frame containing the training data (one or more
numerical predictors and one \strong{Class} attribute).}

\item{assessment.mode}{mode of performance assessment to use. Accepts "CV"
(for cross-validation using all splits in \code{peptides.list$df}) or "holdout"
(in which case the holdout split must be informed in \code{holdout.split})}

\item{holdout.split}{name of split to be used as a holdout set.Ignored if
\code{assessment.mode = "CV"}.}

\item{threshold}{probability threshold for attributing a prediction as
\emph{positive}.}

\item{sample.rebalancing}{logical: should the model try to compensate class
imbalances by weighted sampling of examples when training the trees in the
random forest? See \strong{Dealing with class imbalance}.}

\item{use.global.features}{logical: should global features (potentially
available in \code{peptides.list$proteins}) be used? Should be left as the default
unless the user knows exactly what they're doing. See \strong{Details}.}

\item{ncpus}{number of cores to use.}

\item{rnd.seed}{seed for random number generator}

\item{...}{other options to be passed down to \code{\link[ranger:ranger]{ranger::ranger()}}.}
}
\value{
List containing the fitted model and several performance indicators.
}
\description{
Fits a Random Forest model to epitope data, using the data splits and
features previously calculated using \code{\link[=make_data_splits]{make_data_splits()}} and
\code{\link[=calc_features]{calc_features()}}, respectively.
}
\details{
Function \code{\link[=make_data_splits]{make_data_splits()}} defines data splits based on (protein or
peptide) similarity. The split identifiers are stored in
\code{peptides.list$df$Info_split}. Function \code{\link[=calc_features]{calc_features()}} calculates
the local and/or global features for each entry. Local features are stored in
\code{peptides.list$df} as columns starting with \code{feat_local_}, whereas global
features are stored in \code{peptides.list$proteins}, as columns starting with
\code{feat_global_}.
\strong{NOTE}: Global features should only be used if the splitting level
used was "protein", otherwise they may cause contamination of performance
assessment due to data leakage. The splitting level of the data can be
checked on \code{peptides.list$splits.attrs$split_level}.
}
\section{Dealing with class imbalance}{

Parameter \code{sample.rebalancing} regulates whether the resulting model attempts
to compensate class imbalances. If \code{TRUE} the Random Forest model is subject
to cost-sensitive training, which is done internally by setting the
parameter \code{case.weights} in the call to \code{\link[ranger:ranger]{ranger::ranger()}} to a vector where
each observation of class \emph{i} has a weight equal to \code{1 / K_i}, where
\code{K_i} is the total number of cases of class \code{i} in the training data.
}

\author{
Felipe Campelo (\email{f.campelo@aston.ac.uk})
}
