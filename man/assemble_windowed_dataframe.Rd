% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assemble_windowed_dataframe.R
\name{assemble_windowed_dataframe}
\alias{assemble_windowed_dataframe}
\title{Assemble a sliding window representation of epitope data}
\usage{
assemble_windowed_dataframe(
  epitopes,
  proteins,
  save_folder = NULL,
  min_epit = 8,
  max_epit = 20,
  only_exact = TRUE,
  window_size = NULL,
  window_exp = 0,
  step_size = NULL,
  min_prot_len = min_epit,
  max_prot_len = Inf,
  ncpus = 1
)
}
\arguments{
\item{epitopes}{data frame of epitope data (returned by [get_linear_bcell_epitopes()].}

\item{proteins}{data frame of epitope data (returned by [retrieve_protein_data()].}

\item{save_folder}{path to folder for saving the results.}

\item{min_epit}{positive integer, smallest epitope to be considered}

\item{max_epit}{positive integer, largest epitope to be considered}

\item{only_exact}{logical, should only "Exact epitopes" be considered?}

\item{window_size}{positive integer, size of window to use (see `Details`)}

\item{window_exp}{non-negative integer, how many extra AAs to capture
on either side of the window (see `Details`)}

\item{step_size}{positive integer, step size to use (see `Details`)}

\item{min_prot_len}{shortest protein length to be considered}

\item{max_prot_len}{longest protein length to be considered}

\item{ncpus}{positive integer, number of cores to use (multi-core
capabilities not yet available for Windows systems.)}
}
\value{
A list object containing:
* A data frame containing the extracted windows is returned invisibly.
Each row of the resulting data frame will have the epitope ID, protein ID,
windowed sequence, the class associated with the epitope ID, and other
variables that may be useful for stratification or classification.

* A list of epitope IDs that were removed from the final dataframe due
to data inconsistencies (missing protein data, wrong location in protein,
etc.)
}
\description{
This function is used to turn epitope and protein data into a dataframe where
each row corresponds to a fixed-length window that slides over the epitope
data (and its surrounding aminoacid residues in the protein).
}
\details{
Window size, window expansion value and step size can be set either by the
user or automatically. In the latter case the window is set as
`max(3, (2 * min_epit) - 1)`, the step size as
`min(2, floor(min_epit / 2))`, and the window expansion value as
`min_epit - 1`.

The initial position of the window is set as the first position where
the majority of the AAs covered by the window belong to the target region.
Similarly, the last position of the window is determined as the last one
where the majority of the AAs covered by the window still belong to the
target region.

The window expansion value indicates how many AA extra positions are captured
from each side of the window. If set to zero the resulting dataframe will not
contain the `window_exp` column.

As an example, assume an epitope "QGPGAPQGPGAP" contained within a given
protein, `window_size = 9`, `window_exp = 0` and `step_size = 2`.
Let "X" represent any AA not belonging to the target region, and | be a start
and end positions covered by the window. This routine would then generate the
following windows (each in a distinct row of the resulting dataframe):

...XXXXXQGPGAPQGPGAPXXXXX...\cr
. . . | . . . . . . . . . . . . | . . . . . . . . . . . . . . . . . . . XXXXQGPGA\cr
. . . . . . | . . . . . . . . . . . . | . . . . . . . . . . . . . . . . XXQGPGAPQ\cr
. . . . . . . . . | . . . . . . . . . . . . | . . . . . . . . . . . . . QGPGAPQGP\cr
. . . . . . . . . . . . | . . . . . . . . . . . . | . . . . . . . . . . PGAPQGPGA\cr
. . . . . . . . . . . . . . . | . . . . . . . . . . . . | . . . . . . . APQGPGAPX\cr
. . . . . . . . . . . . . . . . . . | . . . . . . . . . . . . | . . . . QGPGAPXXX\cr
}
\examples{
epitopes <- data.frame(epitope_id = c("1234", "4321"),
              molecule_id = c("P.001", "A.002"),
              start_pos = c(14, 39),
              end_pos = c(23, 50),
              seq = c("LKLATLKLAT", "QGPGAPQGPGAP"),
              epit_struc_def = rep("Exact Epitope", 2),
              qual_measure = factor(c("Negative", "Positive"),
                levels = c("Negative", "Positive", "Positive-Low",
                  "Positive-High", "Positive-Intermediate")),
              epit_len = c(10, 12),
              host_id = c(NA,NA),
              sourceOrg_id = c(NA,NA),
              file_id = c(NA,NA),
              stringsAsFactors = FALSE)

proteins <- data.frame(molecule_id = c("P.001", "A.002"),
              TSeq_sequence = c("TYGACPKYVKQNTLKLATLKLATGMRNVPEKQT",
                "LPKEEKKDDPPKDPKKDDPPKEAQNKLNQPVVADENVDQGPGAPQGPGAPQGPGAPQGPGAPQGPGAPQGPGAPQ"),
              TSeq_taxid = c(NA,NA),
              TSeq_orgname = c(NA,NA),
              stringsAsFactors = FALSE)

x <- assemble_windowed_dataframe(epitopes, proteins, ncpus = 1)
x$windows_df[, 1:4]

}
\author{
Felipe Campelo (\email{f.campelo@aston.ac.uk})
}
